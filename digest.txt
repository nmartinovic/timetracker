Directory structure:
‚îî‚îÄ‚îÄ timetracker/
    ‚îú‚îÄ‚îÄ README.md
    ‚îî‚îÄ‚îÄ index.html

================================================
FILE: README.md
================================================
# Time Tracker Webapp

A lightweight, self-contained **time tracker** that runs entirely in the browser.  
No server, no accounts, no setup. Just open `index.html` in a browser and start tracking.

---

## ‚ú® Features

- ‚è≥ **Countdown Timer** ‚Äì set a task and duration, watch the timer count down
- üìù **Task Attribution** ‚Äì assign each timer to a specific task
- üîî **Notifications & Sound** ‚Äì get a desktop notification and chime when time is up
- üìã **Session History** ‚Äì automatically logs tasks with start/end time and duration
- üì§ **Export to CSV** ‚Äì download your task history in Excel-friendly format
- ‚ùå **Clear History** ‚Äì remove all saved tasks if needed
- üîá **Mute Controls**
  - Mute Sound
  - Disable Notifications
  - Mute Reminders
- üïë **Idle Reminders** ‚Äì if no timer is running for 20 minutes, receive a reminder to start one  
  (only between **09:30‚Äì13:00** and **14:00‚Äì18:00** Paris time)

---

## üñ• Usage

1. Open `index.html` in a modern browser (Chrome, Brave, Firefox, Edge).
2. Enter a task name and duration (minutes).
3. Click **Start** to begin the timer.
4. When the timer finishes, you‚Äôll get a sound + notification.  
   - Click **Stop** to log the task.  
   - You can extend overtime (if enabled).
5. See your sessions in the **Session History** table (newest first).
6. Click **Export CSV** to download your task log.

---

## üîß Controls

- **Start / Stop** ‚Äì control the timer
- **Export CSV** ‚Äì save history as a `.csv`
- **Clear History** ‚Äì wipe all saved tasks
- **Mute Sound** ‚Äì disables the chime
- **Disable Notifications** ‚Äì disables desktop notifications
- **Mute Reminders** ‚Äì disables idle reminders
- **Extend Timer** ‚Äì appears at 0:00 if you want to keep working (counts up overtime)

---

## üíæ Data Persistence

- All data is stored in your browser‚Äôs **localStorage**:
  - Task logs (`time_log`)
  - Settings (mute states, last timer activity)
- Data is **never sent to a server**.

---

## üì¶ Deployment

You can use it locally or host it:

- **Local**: just open `index.html`
- **GitHub Pages**: push to a GitHub repo and enable Pages for free hosting
- **Netlify/Vercel**: drag-and-drop deploy

---

## üïí Time Zones

- Task logs are saved in **UTC** (Excel-friendly format).
- Idle reminder windows (09:30‚Äì13:00 / 14:00‚Äì18:00) use **Europe/Paris** time.

---

## üöÄ Roadmap (ideas)

- Color-coded overtime display
- Quick ‚Äú+5 min / +10 min‚Äù extension buttons
- Tagging / categorization of tasks
- Daily/weekly summaries

---

## üë®‚Äçüíª Author

Built as a simple, personal productivity tool to keep focused and accountable during work hours.



================================================
FILE: index.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Time Tracker</title>
  <style>
    body {
      font-family: sans-serif;
      max-width: 720px;
      margin: 30px auto;
      padding: 20px;
      background: #f9f9f9;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    h1 { text-align: center; }
    input, button {
      padding: 8px;
      margin: 5px 0;
      font-size: 1rem;
    }
    .timer-controls, .log, .admin { margin-top: 20px; }
    .log-table { width: 100%; border-collapse: collapse; }
    .log-table th, .log-table td { padding: 8px; border: 1px solid #ccc; text-align: left; }
    .button-group { display: flex; gap: 10px; flex-wrap: wrap; align-items: center; }
    .muted-badge { font-size: 0.9rem; padding: 2px 8px; border-radius: 999px; background: #eee; color: #555; display: inline-block; margin-left: 6px; }
    .muted-true { background: #ffe2e2; color: #b00020; }
    #nextReminderETA { font-size: 0.9rem; color: #666; margin-top: 6px; }
    /* Simple modal */
    .modal-backdrop {
      position: fixed; inset: 0; background: rgba(0,0,0,0.35);
      display: none; align-items: center; justify-content: center; z-index: 999;
    }
    .modal {
      background: #fff; border-radius: 10px; padding: 16px; width: 100%; max-width: 520px;
      box-shadow: 0 8px 30px rgba(0,0,0,0.2);
    }
    .modal h3 { margin-top: 0; }
    .modal .row { display: grid; grid-template-columns: 140px 1fr; gap: 10px; align-items: center; margin-bottom: 10px; }
    .modal .actions { display: flex; gap: 10px; justify-content: flex-end; margin-top: 6px; }
    .help { font-size: 0.85rem; color: #666; }
    .actions-col { white-space: nowrap; }
    .btn-ghost { background: transparent; border: 1px solid #ccc; border-radius: 6px; padding: 6px 10px; }
    .btn-warn { background: #ffecec; border-color: #ffb3b3; color: #b00020; }
    .nowrap { white-space: nowrap; }
  </style>
</head>
<body>
  <h1>Time Tracker</h1>

  <label>Task:</label>
  <input type="text" id="task" placeholder="Enter task name" />
  <br />
  <label>Duration (minutes):</label>
  <input type="number" id="duration" value="25" min="1" />
  <br />

  <div class="button-group">
    <button onclick="startTimer()">Start</button>
    <button onclick="stopTimer(true)">Stop</button>

    <button onclick="exportCSV()">Export CSV</button>
    <button onclick="clearHistory()">Clear History</button>

    <button id="muteSoundBtn" onclick="toggleMuteSound()">Mute Sound</button>
    <span id="muteSoundBadge" class="muted-badge">Sound: On</span>

    <button id="muteNotifBtn" onclick="toggleMuteNotifications()">Disable Notifications</button>
    <span id="muteNotifBadge" class="muted-badge">Notifications: On</span>

    <button id="muteRemindersBtn" onclick="toggleMuteReminders()">Mute Reminders</button>
    <span id="muteRemindersBadge" class="muted-badge">Reminders: On</span>
  </div>

  <div class="admin">
    <button class="btn-ghost" onclick="openAddModal()">Add Past Session</button>
    <span class="help">Add/edit uses <span class="nowrap"><code>YYYY-MM-DD HH:MM:SS</code></span> in UTC.</span>
  </div>

  <div class="timer-controls">
    <h2 id="countdown">00:00</h2>
    <div id="nextReminderETA"></div>
  </div>

  <div class="log">
    <h3>Session History</h3>
    <table class="log-table" id="logTable">
      <thead>
        <tr>
          <th>Task</th>
          <th class="nowrap">Duration</th>
          <th>Start (UTC)</th>
          <th>End (UTC)</th>
          <th class="actions-col">Actions</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <!-- Edit/Add Modal -->
  <div id="modalBackdrop" class="modal-backdrop">
    <div class="modal">
      <h3 id="modalTitle">Edit Session</h3>
      <div class="row">
        <label for="modalTask">Task</label>
        <input id="modalTask" type="text" placeholder="Task name" />
      </div>
      <div class="row">
        <label for="modalStart">Start (UTC)</label>
        <input id="modalStart" type="text" placeholder="YYYY-MM-DD HH:MM:SS" />
      </div>
      <div class="row">
        <label for="modalEnd">End (UTC)</label>
        <input id="modalEnd" type="text" placeholder="YYYY-MM-DD HH:MM:SS" />
      </div>
      <div class="help">Times must be UTC, e.g. <code>2025-03-01 09:30:00</code>.</div>
      <div class="actions">
        <button class="btn-ghost" onclick="closeModal()">Cancel</button>
        <button class="btn-ghost btn-warn" id="modalDeleteBtn" onclick="deleteSessionFromModal()" style="display:none">Delete</button>
        <button onclick="saveModal()">Save</button>
      </div>
    </div>
  </div>

  <audio id="ding" src="https://actions.google.com/sounds/v1/alarms/digital_watch_alarm_long.ogg" preload="auto"></audio>

  <script>
    // ========= State =========
    let timer = null;
    let endTime = null;
    let startTime = null;
    let currentTask = null;
    let currentDuration = null;
    let dingTimeout = null;

    // Mutes
    let muteSound = JSON.parse(localStorage.getItem('muteSound') || 'false');
    let muteNotifications = JSON.parse(localStorage.getItem('muteNotifications') || 'false');
    let muteReminders = JSON.parse(localStorage.getItem('muteReminders') || 'false');

    // Idle reminder tracking
    let lastTimerActivity = parseInt(localStorage.getItem('lastTimerActivity') || String(Date.now()), 10);
    let idleCheckHandle = null;

    // Logging guard to avoid duplicates
    let hasLoggedCurrent = false;

    // Modal state
    let modalMode = 'edit'; // 'edit' | 'add'
    let modalEditingId = null;

    // ========= Helpers =========
    function markActivity() {
      lastTimerActivity = Date.now();
      localStorage.setItem('lastTimerActivity', String(lastTimerActivity));
    }

    function formatTime(ms) {
      const totalSeconds = Math.max(0, Math.floor(Math.abs(ms) / 1000));
      const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, '0');
      const seconds = String(totalSeconds % 60).padStart(2, '0');
      return `${minutes}:${seconds}`;
    }

    function formatExcelDateString(dateObj) {
      // 'YYYY-MM-DD HH:MM:SS'
      return dateObj.toISOString().replace('T', ' ').split('.')[0];
    }

    function parseUTCString(s) {
      // Expect 'YYYY-MM-DD HH:MM:SS'
      const m = s.trim().match(/^(\d{4})-(\d{2})-(\d{2})\s+(\d{2}):(\d{2}):(\d{2})$/);
      if (!m) return null;
      const [_, Y,M,D,h,mn,sc] = m;
      const ms = Date.UTC(+Y, +M-1, +D, +h, +mn, +sc);
      const dt = new Date(ms);
      return isNaN(dt.getTime()) ? null : dt;
    }

    function durationStringFromDates(startDt, endDt) {
      const ms = Math.max(0, endDt - startDt);
      const minutes = Math.floor(ms / 60000);
      const seconds = Math.floor((ms % 60000) / 1000);
      return `${String(minutes).padStart(2,'0')}:${String(seconds).padStart(2,'0')}`;
    }

    function ensureIdsOnLog(log) {
      let changed = false;
      log.forEach(item => {
        if (!item.id) { item.id = 's_' + Date.now() + '_' + Math.random().toString(36).slice(2,8); changed = true; }
      });
      if (changed) localStorage.setItem('time_log', JSON.stringify(log));
    }

    function findLogIndexById(id) {
      const log = JSON.parse(localStorage.getItem('time_log') || '[]');
      return log.findIndex(x => x.id === id);
    }

    function escapeHtml(s) {
      return String(s).replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
    }

    // Work windows: 09:30‚Äì13:00 and 14:00‚Äì18:00 (Europe/Paris, DST-safe)
    function inParisWorkWindows() {
      const nowParis = new Date(new Date().toLocaleString('en-US', { timeZone: 'Europe/Paris' }));
      const hh = nowParis.getHours();
      const mm = nowParis.getMinutes();
      const minutes = hh * 60 + mm;
      const morningStart = 9 * 60 + 30;  // 09:30
      const morningEnd   = 13 * 60;      // 13:00
      const aftStart     = 14 * 60;      // 14:00
      const aftEnd       = 18 * 60;      // 18:00
      return (minutes >= morningStart && minutes < morningEnd) ||
             (minutes >= aftStart && minutes < aftEnd);
    }

    // ========= Timer =========
    function startTimer() {
      const task = document.getElementById('task').value.trim();
      const minutes = parseInt(document.getElementById('duration').value, 10);
      if (!task || isNaN(minutes) || minutes < 1) return alert('Please enter a valid task and duration.');

      startTime = Date.now();
      endTime = startTime + minutes * 60000;
      currentTask = task;
      currentDuration = minutes;
      hasLoggedCurrent = false;

      updateCountdown();
      markActivity();

      if (!muteNotifications && typeof Notification !== 'undefined' && Notification.permission !== 'granted') {
        Notification.requestPermission();
      }

      if (timer) clearInterval(timer);
      timer = setInterval(() => {
        updateCountdown();
        const remaining = endTime - Date.now();
        if (remaining <= 0 && !hasLoggedCurrent) {
          // Time's up: notify, log, and stop automatically
          notify(currentTask);
          logSession(currentTask);
          hasLoggedCurrent = true;
          stopTimer(false); // cleanup without logging again
        }
      }, 500);
    }

    function stopTimer(log = false) {
      clearInterval(timer);
      timer = null;

      if (log && !hasLoggedCurrent && currentTask && startTime) {
        logSession(currentTask);
        hasLoggedCurrent = true;
      }

      endTime = null;
      startTime = null;
      currentTask = null;
      currentDuration = null;

      document.getElementById('countdown').textContent = '00:00';
      document.title = 'Time Tracker';
      markActivity();
    }

    function updateCountdown() {
      if (!endTime) return;
      const now = Date.now();
      const remaining = Math.max(0, endTime - now);
      const timeString = formatTime(remaining);
      document.getElementById('countdown').textContent = timeString;
      document.title = `${timeString} - Time Tracker`;
    }

    function notify(task) {
      if (!muteSound) {
        const ding = document.getElementById('ding');
        ding.currentTime = 0;
        ding.play();
        dingTimeout = setTimeout(() => { try { ding.pause(); } catch(e){} }, 3000);
      }
      if (!muteNotifications && typeof Notification !== 'undefined' && Notification.permission === 'granted') {
        new Notification('Time is up!', { body: `Task: ${task}` });
      }
    }

    // Log on page unload if finished and not yet logged (belt & suspenders)
    window.addEventListener('beforeunload', () => {
      try {
        if (!hasLoggedCurrent && startTime && endTime && Date.now() >= endTime) {
          logSession(currentTask);
          hasLoggedCurrent = true;
        }
      } catch (e) {}
    });

    // ========= Logging =========
    function logSession(task) {
      if (!startTime) return;
      const start = new Date(startTime);
      const end = new Date();
      const duration = durationStringFromDates(start, end);

      const session = {
        id: 's_' + Date.now() + '_' + Math.random().toString(36).slice(2,8),
        task,
        duration,
        start: formatExcelDateString(start) + ' UTC',
        end: formatExcelDateString(end) + ' UTC',
      };

      const log = JSON.parse(localStorage.getItem('time_log') || '[]');
      log.push(session);
      localStorage.setItem('time_log', JSON.stringify(log));
      renderLog();
    }

    function renderLog() {
      const log = JSON.parse(localStorage.getItem('time_log') || '[]');
      ensureIdsOnLog(log);
      const tbody = document.querySelector('#logTable tbody');
      tbody.innerHTML = '';
      // Newest first
      const reversed = log.slice().reverse();
      reversed.forEach(row => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${escapeHtml(row.task)}</td>
          <td class="nowrap">${row.duration}</td>
          <td class="nowrap">${row.start}</td>
          <td class="nowrap">${row.end}</td>
          <td class="actions-col">
            <button class="btn-ghost" onclick="openEditModal('${row.id}')">Edit</button>
          </td>
        `;
        tbody.appendChild(tr);
      });
    }

    // ========= Export / Clear =========
    function exportCSV() {
      const log = JSON.parse(localStorage.getItem('time_log') || '[]');
      if (log.length === 0) return alert('No data to export.');
      const header = ['Task', 'Duration', 'Start (UTC)', 'End (UTC)'];
      const rows = log.map(r => [r.task, r.duration, r.start, r.end]);
      const csv = [header.join(','), ...rows.map(r => r.map(csvEscape).join(',')).join('\n')].join('\n');
      const blob = new Blob([csv], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'time_log.csv';
      a.click();
      function csvEscape(val){
        const s = String(val ?? '');
        return (s.includes(',') || s.includes('"') || s.includes('\n')) ? '"' + s.replace(/"/g,'""') + '"' : s;
      }
    }

    function clearHistory() {
      if (confirm('Are you sure you want to delete all session history?')) {
        localStorage.removeItem('time_log');
        renderLog();
        markActivity(); // counts as activity
      }
    }

    // ========= Toggles =========
    function toggleMuteSound() {
      muteSound = !muteSound;
      localStorage.setItem('muteSound', JSON.stringify(muteSound));
      const badge = document.getElementById('muteSoundBadge');
      document.getElementById('muteSoundBtn').textContent = muteSound ? 'Unmute Sound' : 'Mute Sound';
      badge.textContent = muteSound ? 'Sound: Off' : 'Sound: On';
      badge.className = 'muted-badge ' + (muteSound ? 'muted-true' : '');
      if (muteSound) {
        const ding = document.getElementById('ding');
        if (!ding.paused) ding.pause();
        if (dingTimeout) { clearTimeout(dingTimeout); dingTimeout = null; }
      }
    }

    function toggleMuteNotifications() {
      muteNotifications = !muteNotifications;
      localStorage.setItem('muteNotifications', JSON.stringify(muteNotifications));
      const badge = document.getElementById('muteNotifBadge');
      document.getElementById('muteNotifBtn').textContent = muteNotifications ? 'Enable Notifications' : 'Disable Notifications';
      badge.textContent = muteNotifications ? 'Notifications: Off' : 'Notifications: On';
      badge.className = 'muted-badge ' + (muteNotifications ? 'muted-true' : '');
    }

    function toggleMuteReminders() {
      muteReminders = !muteReminders;
      localStorage.setItem('muteReminders', JSON.stringify(muteReminders));
      const badge = document.getElementById('muteRemindersBadge');
      document.getElementById('muteRemindersBtn').textContent = muteReminders ? 'Unmute Reminders' : 'Mute Reminders';
      badge.textContent = muteReminders ? 'Reminders: Off' : 'Reminders: On';
      badge.className = 'muted-badge ' + (muteReminders ? 'muted-true' : '');
    }

    // ========= Idle Reminder (cold start‚Äìsafe, resilient) =========
    let nextReminderEstimateEl = null;

    function ensureNotifPermissionForReminders() {
      if (!muteNotifications && typeof Notification !== 'undefined' && Notification.permission !== 'granted') {
        Notification.requestPermission();
      }
    }

    function msSinceLastActivity() {
      return Date.now() - lastTimerActivity;
    }

    function updateNextReminderEstimate() {
      if (!nextReminderEstimateEl) {
        nextReminderEstimateEl = document.getElementById('nextReminderETA');
      }
      const noTimerRunning = (timer === null);
      if (!noTimerRunning || muteReminders || !inParisWorkWindows()) {
        nextReminderEstimateEl.textContent = '';
        return;
      }
      const remainingMs = Math.max(0, (20*60*1000) - msSinceLastActivity());
      const m = String(Math.floor(remainingMs / 60000)).padStart(2,'0');
      const s = String(Math.floor((remainingMs % 60000) / 1000)).padStart(2,'0');
      nextReminderEstimateEl.textContent =
        remainingMs === 0 ? 'Reminder eligible now.' : `Next reminder in ~${m}:${s}`;
    }

    function maybeSendIdleReminder() {
      const noTimerRunning = (timer === null);
      if (noTimerRunning && !muteReminders && inParisWorkWindows()) {
        if (msSinceLastActivity() >= 20*60*1000) {
          if (!muteNotifications && typeof Notification !== 'undefined') {
            if (Notification.permission !== 'granted') Notification.requestPermission();
            if (Notification.permission === 'granted') {
              new Notification('Reminder: no timer running', { body: 'Start a timer?' });
            }
          }
          // Reset so we don‚Äôt spam every minute
          markActivity();
        }
      }
      updateNextReminderEstimate();
      scheduleNextIdleCheck();
    }

    function scheduleNextIdleCheck(delayMs = 60*1000) {
      if (idleCheckHandle) clearTimeout(idleCheckHandle);
      idleCheckHandle = setTimeout(maybeSendIdleReminder, delayMs);
    }

    // ========= Modal: Add/Edit =========
    function openEditModal(id) {
      const log = JSON.parse(localStorage.getItem('time_log') || '[]');
      const entry = log.find(x => x.id === id);
      if (!entry) return alert('Entry not found.');

      modalMode = 'edit';
      modalEditingId = id;
      document.getElementById('modalTitle').textContent = 'Edit Session';
      document.getElementById('modalDeleteBtn').style.display = '';
      document.getElementById('modalTask').value = entry.task || '';
      document.getElementById('modalStart').value = (entry.start || '').replace(' UTC','');
      document.getElementById('modalEnd').value = (entry.end || '').replace(' UTC','');

      openModal();
    }

    function openAddModal() {
      modalMode = 'add';
      modalEditingId = null;
      document.getElementById('modalTitle').textContent = 'Add Past Session';
      document.getElementById('modalDeleteBtn').style.display = 'none';
      document.getElementById('modalTask').value = '';
      document.getElementById('modalStart').value = '';
      document.getElementById('modalEnd').value = '';
      openModal();
    }

    function openModal() {
      document.getElementById('modalBackdrop').style.display = 'flex';
    }
    function closeModal() {
      document.getElementById('modalBackdrop').style.display = 'none';
    }

    function saveModal() {
      const task = document.getElementById('modalTask').value.trim();
      const startStr = document.getElementById('modalStart').value.trim();
      const endStr = document.getElementById('modalEnd').value.trim();
      if (!task) return alert('Task is required.');
      const startDt = parseUTCString(startStr);
      const endDt = parseUTCString(endStr);
      if (!startDt || !endDt) return alert('Please enter valid UTC times: YYYY-MM-DD HH:MM:SS');
      if (endDt <= startDt) return alert('End must be after Start.');

      const duration = durationStringFromDates(startDt, endDt);
      const payload = {
        task,
        duration,
        start: formatExcelDateString(startDt) + ' UTC',
        end: formatExcelDateString(endDt) + ' UTC',
      };

      const log = JSON.parse(localStorage.getItem('time_log') || '[]');
      ensureIdsOnLog(log);

      if (modalMode === 'edit') {
        const idx = findLogIndexById(modalEditingId);
        if (idx === -1) return alert('Entry not found.');
        payload.id = log[idx].id;
        log[idx] = payload;
      } else {
        payload.id = 's_' + Date.now() + '_' + Math.random().toString(36).slice(2,8);
        log.push(payload);
      }

      localStorage.setItem('time_log', JSON.stringify(log));
      closeModal();
      renderLog();
    }

    function deleteSessionFromModal() {
      if (!confirm('Delete this session?')) return;
      const log = JSON.parse(localStorage.getItem('time_log') || '[]');
      const idx = findLogIndexById(modalEditingId);
      if (idx === -1) return alert('Entry not found.');
      log.splice(idx, 1);
      localStorage.setItem('time_log', JSON.stringify(log));
      closeModal();
      renderLog();
    }

    // ========= Init =========
    (function initUI(){
      document.getElementById('muteSoundBtn').textContent = muteSound ? 'Unmute Sound' : 'Mute Sound';
      document.getElementById('muteSoundBadge').textContent = muteSound ? 'Sound: Off' : 'Sound: On';
      document.getElementById('muteSoundBadge').className = 'muted-badge ' + (muteSound ? 'muted-true' : '');

      document.getElementById('muteNotifBtn').textContent = muteNotifications ? 'Enable Notifications' : 'Disable Notifications';
      document.getElementById('muteNotifBadge').textContent = muteNotifications ? 'Notifications: Off' : 'Notifications: On';
      document.getElementById('muteNotifBadge').className = 'muted-badge ' + (muteNotifications ? 'muted-true' : '');

      document.getElementById('muteRemindersBtn').textContent = muteReminders ? 'Unmute Reminders' : 'Mute Reminders';
      document.getElementById('muteRemindersBadge').textContent = muteReminders ? 'Reminders: Off' : 'Reminders: On';
      document.getElementById('muteRemindersBadge').className = 'muted-badge ' + (muteReminders ? 'muted-true' : '');

      if (!localStorage.getItem('lastTimerActivity')) {
        markActivity();
      } else {
        lastTimerActivity = parseInt(localStorage.getItem('lastTimerActivity'), 10) || Date.now();
      }

      // Ask for permission early so cold-start reminders work
      if (!muteNotifications && typeof Notification !== 'undefined' && Notification.permission !== 'granted') {
        Notification.requestPermission();
      }

      renderLog();

      // Kick off idle reminder loop
      updateNextReminderEstimate();
      scheduleNextIdleCheck(60*1000);
      document.addEventListener('visibilitychange', () => {
        updateNextReminderEstimate();
        if (!document.hidden) scheduleNextIdleCheck(2*1000);
      });

      // Close modal on ESC or backdrop click
      document.addEventListener('keydown', (e) => { if (e.key === 'Escape') closeModal(); });
      document.getElementById('modalBackdrop').addEventListener('click', (e) => {
        if (e.target.id === 'modalBackdrop') closeModal();
      });
    })();
  </script>
</body>
</html>


